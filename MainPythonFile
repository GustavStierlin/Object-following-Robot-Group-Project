The following is Python code that we used to run and control the Robot.

from time import sleep
import RPi.GPIO as GPIO
import serial
from Get_Info import *
import cv2
import numpy as np
from picamera2 import Picamera2
import time
#from gpiozero import AngularServo
picam2 = Picamera2()
#Obstacle Avoidance
#servo = AngularServo(37, min_pulse_width=0.0006, max_pulse_width=0.0023)
GPIO.setmode(GPIO.BOARD)
GPIO.setup(22, GPIO.OUT)
pwm_f=GPIO.PWM(22,50)
pwm_f.start(0)
GPIO.setup(37, GPIO.OUT)
pwm_r=GPIO.PWM(37,50)
pwm_r.start(0)
# attribute the pins from the ultrasonic sensor
TRIG_f = 3
ECHO_f = 5
GPIO.setup(TRIG_f,GPIO.OUT)
GPIO.setup(ECHO_f,GPIO.IN)
GPIO.output(TRIG_f, False)
TRIG_r = 13
ECHO_r = 15
GPIO.setup(TRIG_r,GPIO.OUT)
GPIO.setup(ECHO_r,GPIO.IN)
GPIO.output(TRIG_r, False)
#OBJECT FOLLOWING

#pan=Servo(pin=13)
#tilt=Servo(pin=12)
panAngle=0
tiltAngle=0

#pan.set_angle(panAngle)
# tilt.set_angle(tiltAngle)

def TrackX(val):
    global xPos
    xPos=val
    #print('x Poistion', xPos)
    
def TrackY(val):
    global yPos
    yPos=val
    #print('y Poistion', yPos)

def TrackW(val):
    global boxW
    boxW=val
    #print('Box width', boxW)

def TrackH(val):
    global boxH
    boxH=val
    #print('Box height', boxH)

dispW=1280
dispH=720
picam2.preview_configuration.main.size = (dispW,dispH)
picam2.preview_configuration.main.format = "RGB888"
picam2.preview_configuration.controls.FrameRate=30
picam2.preview_configuration.align()
picam2.configure("preview")
picam2.start()

fps=0
pos=(30,60)
font=cv2.FONT_HERSHEY_SIMPLEX
height=1.5
weight=3
myColor=(0,0,255)

upperLeft=(250,20)
lowerRight=(800,650)
rColor=(255,0,255)
thickness=3

# hueLow=115
# hueHigh=130
# satLow=100
# satHigh=255
# valLow=100
# valHigh=255

#lowerBound=np.array([hueLow,satLow,valLow])
#upperBound=np.array([hueHigh,satHigh,valHigh])

cv2.namedWindow('My Trackbars')
cv2.createTrackbar('X Pos','My Trackbars',10,dispW-1,TrackX)
cv2.createTrackbar('Y Pos','My Trackbars',10,dispH-1,TrackY)
cv2.createTrackbar('Box Width','My Trackbars',10,dispW-1,TrackW)
cv2.createTrackbar('Box Height','My Trackbars',10,dispH-1,TrackH)



def onTrack1(val):
    global hueLow
    hueLow=val
    #print('hueLow', hueLow)
    
def onTrack2(val):
    global hueHigh
    hueHigh=val
    #print('hueHigh', hueHigh)
    
def onTrack3(val):
    global satLow
    satLow=val
    #print('satLow', satLow)
    
def onTrack4(val):
    global satHigh
    satHigh=val
    #print('satHigh', satHigh)
    
def onTrack5(val):
    global valLow
    valLow=val
    #print('valLow', valLow)
    
def onTrack6(val):
    global valHigh
    valHigh=val
    #print('valHigh', valHigh)
    

cv2.namedWindow('My Trackbar Colours')
cv2.createTrackbar('hueLow','My Trackbar Colours',1,179,onTrack1)
cv2.createTrackbar('hueHigh','My Trackbar Colours',68,179,onTrack2)
cv2.createTrackbar('satLow','My Trackbar Colours',71,255,onTrack3)
cv2.createTrackbar('satHigh','My Trackbar Colours',255,255,onTrack4)
cv2.createTrackbar('valLow','My Trackbar Colours',100 ,255,onTrack5)
cv2.createTrackbar('valHigh','My Trackbar Colours',255,255,onTrack6)











GPIO.setmode(GPIO.BOARD)
button1=19
button2=21
GPIO.setup(button1,GPIO.IN,pull_up_down=GPIO.PUD_UP)
GPIO.setup(button2,GPIO.IN,pull_up_down=GPIO.PUD_UP)

PWR1, ENA1, IN1, IN2, GND = 2, 32, 31, 29, 39
GPIO.setup(ENA1, GPIO.OUT)
GPIO.setup(IN1, GPIO.OUT)
GPIO.setup(IN2, GPIO.OUT)
PWMA = GPIO.PWM(ENA1, 100)
PWMA.start(0)

PWR2, ENA2, IN3, IN4, GND = 4, 12, 18, 16, 34
GPIO.setup(ENA2, GPIO.OUT)
GPIO.setup(IN3, GPIO.OUT)
GPIO.setup(IN4, GPIO.OUT)
PWMB = GPIO.PWM(ENA2, 100)
PWMB.start(0)

ser = serial.Serial(
port='/dev/ttyUSB1',
baudrate = 9600,
parity=serial.PARITY_NONE,
stopbits=serial.STOPBITS_TWO,
timeout=1
)

data = [0,0]

def calculate_distance_f():
    pulse_duration = 0.0
    pulse_end = 0.0
    GPIO.setwarnings(False)
    GPIO.output(TRIG_f, True)
    time.sleep(0.00001)
    GPIO.output(TRIG_f, False) 
    while GPIO.input(ECHO_f)==0:
        pulse_start = time.time()
    while GPIO.input(ECHO_f)==1:
        pulse_end = time.time()
    pulse_duration = pulse_end - pulse_start                                                                                                                             
    distance = pulse_duration * 17150
    distance = round(distance+1.15, 2)
    return distance

def calculate_distance_r():
    pulse_duration = 0.0
    pulse_end = 0.0
    GPIO.setwarnings(False)
    GPIO.output(TRIG_r, True)
    time.sleep(0.00001)
    GPIO.output(TRIG_r, False) 
    while GPIO.input(ECHO_r)==0:
        pulse_start = time.time()
    while GPIO.input(ECHO_r)==1:
        pulse_end = time.time()
    pulse_duration = pulse_end - pulse_start                                                                                                                             
    distance = pulse_duration * 17150
    distance = round(distance+1.15, 2)
    return distance


def O_V(p):
    if(p == 1.1):
        print("left front")
        #Motor_control(0, 0, 1, 0)
    if(p == 1.2):
        print("center front")
        Motor_control(-100, -100, 2, 1)
        Motor_control(100, -100, 3, 1)
        Motor_control(100, 100, 3, 1)
        Motor_control(-100, 100, 3, 1)
    if(p == 1.3):
        print("right front")
        #Motor_control(0, 0, 1, 0)
    if(p == 2.1):
        print("left rear")
        #Motor_control(0, 0, 1, 0)
    if(p == 2.2):
        print("center rear")
        #Motor_control(0, 0, 1, 0)
    if(p == 2.3):
        print("right rear")
        #Motor_control(0, 0, 1, 0)

def Motor_control(M1, M2, Run, Mode):

    if(M1 == 0):
        GPIO.output(IN1, GPIO. LOW)
        GPIO.output(IN2, GPIO.LOW)
    if(M2 == 0):
        GPIO.output(IN3, GPIO.LOW)
        GPIO.output(IN4, GPIO.LOW)
    if(M1 > 0):
        if(Mode == 0):
             pwm_f.ChangeDutyCycle(10)
             if(calculate_distance_f()< 50):
                 print("Obstical Front Left")
                 O_V(1.1) 
        PWMA.ChangeDutyCycle(M1)
        GPIO.output(IN1, GPIO.HIGH)
        GPIO.output(IN2, GPIO.LOW)
    
    if(M1 < 0):
        #print(-1*M1)
        if(Mode == 0):
            #servo.angle = 90
            pwm_r.ChangeDutyCycle(5)
             #sleep(0.5)
            if(calculate_distance_r()< 50):
                print("Obstical Back Left")
                O_V(2.1)
        PWMA.ChangeDutyCycle(-1*M1)
        GPIO.output(IN1, GPIO.LOW)
        GPIO.output(IN2, GPIO.HIGH)
    
    if(M2 > 0):
        if(Mode == 0):
             pwm_f.ChangeDutyCycle(5)
             if(calculate_distance_f()< 50):
                 print("Obstical Front Right")
                 O_V(1.3) 
        PWMB.ChangeDutyCycle(M2)
        GPIO.output(IN3, GPIO.LOW)
        GPIO.output(IN4, GPIO.HIGH)
    
    if(M2 < 0):
        if(Mode == 0):
             pwm_r.ChangeDutyCycle(10)
             if(calculate_distance_r()< 50):
                 print("Obstical Back Right")
                 O_V(2.3)
                 
        PWMB.ChangeDutyCycle(-1*M2)
        GPIO.output(IN3, GPIO.HIGH)
        GPIO.output(IN4, GPIO.LOW)
    if(Mode == 0):
        if(M1 < 0 and M2 < 0):
            pwm_r.ChangeDutyCycle(8)
            if(calculate_distance_r()< 50):
                print("Obstical Back")
                O_V(2.2)
    
    if(Mode == 0):
        if(M1 > 0 and M2 > 0):
            pwm_f.ChangeDutyCycle(8)
            if(calculate_distance_f()< 50):
                print("Obstical Front")
                O_V(1.2)        
    sleep(Run)

def Mapping(n):
    print(n, "map size")
    for x in range(n):
        print("line", x)
        Motor_control(100, 100, n, 0)
        if((x%2) == 0):
            print("end1")
            Motor_control(100, -100, 3, 0)
            Motor_control(100, 100, 2.5, 0)
            Motor_control(100, -100, 3, 0)
        else:
            print("end2")
            Motor_control(-100, 100, 3, 0)
            Motor_control(100, 100, 2.5, 0)
            Motor_control(-100, 100, 3, 0)
        
#im= picam2.capture_array()
#cv2.imshow("Camera", im)

while(True):
    line=str(ser.readline())
    print(line)
    im= picam2.capture_array()
    cv2.setWindowProperty("window",cv2.WND_PROP_FULLSCREEN,cv2.WINDOW_FULLSCREEN)
    cv2.imshow("window", im)
    
    if cv2.waitKey(1)==ord('q'):
        break
    if GPIO.input(button1)==0:
        #print ("Program 1")
        #im= picam2.capture_array()
        #cv2.imshow("Camera", im)
    
        dataBuffer = data
        #line=str(ser.readline())
        #print(line)
        if len(line)>7:
            data = (line[2:-5].replace(","," ").split())
            if len(data) == 3:
                data = [data[0],data[-1]]
            
            try:
                data = [int(data[0]),int(data[1])]
            except:
                print('Using previous value')
                data = dataBuffer
            
            if data[0] > 100:
                data[0] = 100
            if data[0] < -100:
                data[0] = -100
            if data[1] > 100:
                data[1] = 100
            if data[1] < -100:
                data[1] = -100
            Motor_control(data[1],data[0], 0, 1)

    if GPIO.input(button2)==0:

        tStart=time.time()
        im= picam2.capture_array()
        imHSV=cv2.cvtColor(im,cv2.COLOR_BGR2HSV)
    

        lowerBound=np.array([hueLow,satLow,valLow])
        upperBound=np.array([hueHigh,satHigh,valHigh])
    
        myMask =cv2.inRange(imHSV,lowerBound,upperBound)
        myMaskSm=cv2.resize(myMask,(int(dispW/2),int(dispH/2)))
   
    
        objectofInterest=cv2.bitwise_and(im,im,mask=myMask)
        objectofInterestSm=cv2.resize(objectofInterest,(int(dispW/2),int(dispH/2)))
    
        contours, junk= cv2.findContours(myMask,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)
        if len(contours)>0:
            contours=sorted(contours, key=lambda x:cv2.contourArea(x), reverse=True)
            cv2.drawContours(im,contours,0,(255,0,0),3)
            contour=contours[0]
            x,y,w,h=cv2.boundingRect(contour)
            cv2.rectangle(im,(x,y),(x+w,y+h),(0,255,0),3)
            error=(x+w/2)-dispW/2
   
            robot_dir = int(error/6)
            area = int((w*h)/100)
            #print(area)
            if(area == 0):
                Motor_control(0, 0, 0, 0)
            if((area > 30) and (area < 130)):
                print("dead zone")
                if(robot_dir < 0):
                    #print("Right motor ON")
                    Motor_control(100, 0, 0, 0)
                if(robot_dir > 0):
                    #print("Left motor ON")
                    Motor_control(0, 100, 0, 0)
            if(area < 30) and (area > 1):
                print("forward")
                Motor_control(100, 100, 0, 0)
            if(area > 130):
                print("backward")
                Motor_control(-100, -100, 0, 0)

        cv2.putText(im,str(int(fps))+' FPS',pos,font,height,myColor,weight)
        cv2.rectangle(im,(xPos,yPos),(xPos+boxW,yPos+boxH),rColor,thickness)
        ROI=im[yPos:yPos+boxH,xPos:xPos+boxW]
        
        cv2.setWindowProperty("window",cv2.WND_PROP_FULLSCREEN,cv2.WINDOW_FULLSCREEN)
        cv2.imshow("window", im)
            #cv2.imshow("Object of Interest",objectofInterestSm)
            #cv2.imshow("myMask",myMaskSm)
        if cv2.waitKey(1)==ord('q'):
            break
        tEnd=time.time()
        loopTime=tEnd-tStart
        fps=.9*fps + .1*(1/loopTime)
           
            
            
            
            
            
            
    if(GPIO.input(button2)==1) and (GPIO.input(button1)==1):
        p_data = int(read())
        if(p_data > 0):
            Mapping(p_data)
        else:
            print("Map Data Not Initiated")

            #except:
            #    print("Mapping Data Not Recived")
